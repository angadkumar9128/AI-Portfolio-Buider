import ReactDOMServer from 'react-dom/server';
import React from 'react';
import { PortfolioData } from '../types';
import Portfolio from '../components/portfolio/Portfolio';
import { PortfolioProvider } from '../context/PortfolioContext';

// JSZip and saveAs are loaded from a CDN as global variables
declare var JSZip: any;
declare var saveAs: (blob: Blob, filename: string) => void;

const getHtmlTemplate = (content: string, portfolioData: PortfolioData): string => `
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${portfolioData.seo.title}</title>
    <meta name="description" content="${portfolioData.seo.description}">
    <style>html { scroll-behavior: smooth; }</style>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-100 dark:bg-gray-900">
    <div id="root">${content}</div>
    <script>
        // Simple smooth scroll script for anchor links, since React isn't running
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    try {
                        const targetId = this.getAttribute('href');
                        // Handle clicking on the main portfolio link to scroll to the top
                        if (targetId === '#') {
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            return;
                        }
                        const targetElement = document.querySelector(targetId);
                        if (targetElement) {
                             targetElement.scrollIntoView({
                                behavior: 'smooth',
                                block: 'start'
                            });
                        }
                    } catch(e) {
                        console.error('Error scrolling:', e);
                    }
                });
            });
        });
    </script>
  </body>
</html>
`;

const getReadmeContent = (name: string): string => `
# ${name}'s Portfolio

This is a static HTML portfolio generated by the AI Portfolio Builder.

## How to Host for Free

You can easily host this website on several free platforms.

### 1. GitHub Pages

1.  Create a new public repository on GitHub named \`<your-username>.github.io\`.
2.  Upload the \`index.html\` file from this zip archive to that repository.
3.  Your portfolio will be live at \`https://<your-username>.github.io\`.

### 2. Vercel

1.  Sign up for a free account at [vercel.com](https://vercel.com).
2.  Drag and drop the folder containing your \`index.html\` file into the Vercel dashboard.
3.  Vercel will deploy your site and give you a unique URL.

### 3. Netlify

1.  Sign up for a free account at [netlify.com](https://netlify.com).
2.  Drag and drop the folder containing your \`index.html\` file into the Netlify dashboard.
3.  Netlify will provide you with a live URL.

That's it! Your professional portfolio is now live on the web.
`;

export const downloadPortfolioAsZip = async (portfolioData: PortfolioData): Promise<void> => {
    if (typeof JSZip === 'undefined') {
        throw new Error("Download library (JSZip) is not loaded yet. Please try again in a moment.");
    }
    if (typeof saveAs === 'undefined') {
        throw new Error("Download library (FileSaver.js) is not loaded yet. Please try again in a moment.");
    }
    
    try {
        const portfolioToRender = React.createElement(
            PortfolioProvider,
            { initialData: portfolioData },
            React.createElement(Portfolio, {
                onAdminClick: () => {},
                onDownloadClick: () => {},
                isDownloading: false,
                isExporting: true,
            })
        );

        const staticMarkup = ReactDOMServer.renderToStaticMarkup(portfolioToRender);
        const fullHtml = getHtmlTemplate(staticMarkup, portfolioData);
        const readmeContent = getReadmeContent(portfolioData.personalDetails.name);

        const zip = new JSZip();
        zip.file("index.html", fullHtml);
        zip.file("README.md", readmeContent);

        const content = await zip.generateAsync({ type: "blob" });
        
        // Use FileSaver.js for a reliable download
        saveAs(content, "portfolio.zip");

    } catch (error) {
        console.error("Download creation failed:", error);
        throw new Error(`Could not create the portfolio zip file. ${error instanceof Error ? error.message : String(error)}`);
    }
};